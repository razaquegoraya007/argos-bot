'use strict';_={edtCmb:' <{edtCmb1}>\n <it>Mouse gesture</it> (click on the blue arrows)<hr b>\n <it><c h=/brwEvt>Browser event</c></it> (choose one from the "events" menu)<br>\n <{edtCmb2}>\n ',edtCmbG:" <{edtCmb1}><{edtCmb2}>\n ",edtCmb1:" Press now the keys and buttons for your trigger. <br>\n When done, <u>click outside</u> the yellow box. <hr b=2>\n If you make a mistake, you can remove elements with a <br> <u>right click</u> on each element. <hr b=2>\n In order to enter a <c b>Left Mouse Button</c>, you must click on <br> an <u>empty area inside</u> the yellow box,\n while the mouse <br> cursor is a cross <hr b=3>\n A trigger can be any combination of: <hr b>\n <it>Regular keys</it> (all 104 standard keys are supported) <hr b>\n <it><c h=mediaKs>Media keys</c></it> (volume keys, browser keys, etc.) <hr b>\n <it>Mouse buttons</it> (5 buttons supported) <hr b>\n <it>Horizontal and vertical scroll wheels</it> <hr b>\n <it>Joystick buttons and axes</it> (up to 8 joysticks) <hr b>\n ",
edtCmb2:` <hr b=4>\n See <a href='${_xg.triggers}'>this page</a> for examples of all the possibilities.\n `,mediaKs:" Some keyboards have special keys to play/pause the <br> media player, turn the volume up/down, open the <br>\n browser home page, e-mail, etc. These are collectively <br> called <b>Media keys</b>. \n ",brwSt:" By default, triggers work only when the browser is focused.<br>\n This condition lets you specify that the trigger must work in one or more of these states:\n <hr b=2>\n <b>Focused:</b> When Chrome is the <c h=/focWin>focused window</c>. <hr b>\n <b>Unfocused:</b> When the focused window is any other program. <hr b>\n <b>Closed:</b> When there are no Chrome windows open (the browser is in <c h=bgMod>background mode</c>).\n ",
crtSt0:" Choose whether the trigger must work when the text cursor is active or not. <br>\n i.e. when a text field is focused and the text cursor is blinking inside it. <hr b>\n By default, triggers work regardless of the state of the text cursor.\n ",crtSt:` <{crtSt0}> <hr b=2>\n You must choose at least one of the following states: <hr b=2>\n <table deftnLst>\n <tr><td><b blu bldSp>On:</b> <td> When the text cursor is focused on any text field except <br> the <c h=/ombar>omnibox</c>. <hr b>\n <tr><td><b blu bldSp>Omnibox:</b> <td> When the text cursor is focused on the <c h=/ombar>omnibox</c>. <br>\n See <a href="${_xg.omboxShrt}">here</a> some examples of using this. <hr b>\n <tr><td><b blu bldSp>Off:</b> <td> When there's no text cursor (i.e. no text field is focused).\n </table>\n <{MORE}> <hr b=3>\n The <b>Text cursor</b> condition can detect the state of the text cursor in any <br>\n program if it's combined with the <c b h=brwSt>Browser state</c> condition. <hr b>\n For example, the following two conditions will make a trigger work only <br> when the text cursor is active in any text field outside Chrome: <hr b>\n <c hl><c blk blr>Browser state:</c> &nbsp; <c blu blr>Unfocused</c></c> <hr b>\n <c hl><c blk blr>Text cursor:</c> &nbsp; <c blu blr>On</c></c>\n `,
menuSt:" You can choose whether the trigger works when <br> an <c h=/actions/menu>AutoControl menu</c> is\n currently open or not. <hr b>\n By default, triggers work on both cases. <hr b=2>\n You can add multiple menu conditions in order <br> to restrict the trigger to the presence or absence <br> of specific menus.\n ",mseOvr:` <{/noSuprt}>\n You can restrict a trigger to work only when the mouse is hovering over <br> specific areas of the browser\n window or over certain menu items in an <br> <c h=/actions/menu>AutoControl menu</c>. <hr b>\n You can add multiple mouse-over conditions. If you do, the areas you <br> choose will combine or subtract as specified by each condition. <hr b=2>\n See <a href="${_xg.mseHvrShrt}">this page</a> for examples of using this feature.\n <{MORE}> <hr b=2>\n When this condition is added to a mouse gesture, the condition will <br> apply to the position the mouse had when the gesture started,\n not the <br> position the mouse has when the gesture is finished. See examples <a href="<{/URLS/hvrGest}>">here</a>.\n `,
swchSt0:" You can restrict a trigger to work only when a <c h=/switch>SWITCH</c> is in a given <br> state (ON or OFF). You can add multiple switch conditions to the <br>\n same trigger. Each condition will be combined with the next using <br> the operators <b>AND</b>, <b>OR</b> or <b>EQUAL</b>.\n ",swchSt:" <{swchSt0}> <hr b=2>\n <b>For example:</b> <hr b=2>\n <c hl0><c blu>Switch 1</c> &nbsp; is <c sml>ON</c></c> &nbsp; <b>OR</b> <br>\n <c hl0><c blu>Switch 2</c> &nbsp; is <c sml>ON</c></c> &nbsp; <b>AND</b> <br>\n <c hl0><c blu>Switch 3</c> &nbsp; is <c sml>OFF</c></c> <hr b=3>\n The combination of those 3 conditions will be true when either <br> <c blu>Switch 1</c> <b>OR</b> <c blu>Switch 2</c> are ON <b>AND</b>\n <c blu>Switch 3</c> is OFF.\n <{MORE}> <hr b=4>\n <b>Another example:</b> <hr b=2>\n <c hl0><c blu>Switch 4</c> &nbsp; is <c sml>OFF</c></c> &nbsp; <b>EQUAL</b> <br>\n <c hl0><c blu>Switch 5</c> &nbsp; is <c sml>OFF</c></c> <hr b=3>\n The combination of these 2 conditions will be <c prpl blr>true</c> when both <br> conditions have the same truth value, i.e. when they are both\n <c prpl blr>true</c> <br> or both <c prpl blr>false</c>. <br>\n e.g. if <c blu>Switch 4</c> was ON, then the first condition would be <c prpl blr>false</c>; if <br> <c blu>Switch 5</c> was ON, then the second\n condition would also be <c prpl blr>false</c>; <br> therefore the combination of the 2 conditions would be <c prpl blr>true</c> <br> because\n <c prpl blr>false</c> <b>EQUALS</b> <c prpl blr>false</c>.\n ",
bgMod:` When Chrome is in background mode, the Chrome <br> icon <img src="res/chromeIcon.png">\n shows up in the <c h=/sysTr>notification area</c>. <hr b=2>\n If you don't see the icon there, you can enable this <br> feature in Chrome's settings\n <a href="${_Td("<lang{/trans/bgApps}>")}">here</a>.\n `,part:{full:" The entire <c h=/url>URL</c> will be matched against the entered text.",dom:" Only the <c h=/domPrt>domain</c> part of the URL will be matched <br> against the entered text.",mDom:" Only the <c h=/mDomPrt>main domain</c> part of the URL will be <br> matched against the entered text.",
pth:" Only the <c h=/pthPrt>path</c> part of the URL will be matched <br> against the entered text. <hr b>\n <b>Note:</b> <br>\n The path always starts with a slash character <c hl0 b>/</c>. <br>\n Therefore, in order to match an empty path, you <br> must enter a single slash in the text box. \n "},negate:{ds:" The URL is allowed if the condition is <c b blu>true</c>. <hr b> If you specify more than one <c b hl0>does</c> condition, <br> <u>at least one</u> of them must be <c b blu>true</c>.",dnt:" The URL is allowed if the condition is <c b blu>false</c>. <hr b> If you specify more than one <c b hl0>doesn't</c> condition, <br> <u>all of them</u> must be <c b blu>false</c>.",
mst:" The URL is allowed if the condition is <c b blu>true</c>. <hr b> If you specify more than one <c b hl0>must</c> condition, <br> <u>all of them</u> must be <c b blu>true</c>."},urlPr:" You can restrict a trigger to work only when the <c h=/tse/cur>current tab</c> matches <br> one or more <c h=/url>URL</c> conditions.\n In the absence of any conditions, a <br> trigger will work no matter what URL the <c h=/tse/cur>current tab</c> has.\n <{urlPr1}>\n ",urlPr1:" <{MORE}> <hr b=2>\n <b>Note:</b> <br>\n These URL conditions DO NOT affect the <b>Action</b> side (the right side <br> of the <c blr blk>Trigger-Action</c> pair).\n That side has its own way of specifying <br> what tabs to be applied to.\n ",
urlPr2:" <{urlPr}> <{urlPr3}>\n ",urlPr3:" <hr b=3>\n Each condition can be either an inclusion or an exclusion of URLs. Use <c hl0><c b h=negate/ds>does</c></c> <br> or\n <c hl0><c b h=negate/mst>must</c></c> for inclusions and <c hl0><c b h=negate/dnt>doesn't</c></c> for exclusions. Exclusions win over <br> inclusions.\n <hr b=2>\n \x3c!-- A condition can be applied to the <b>whole URL</b>, the <b h=/domPrt>domain</b> part or the <b h=/pthPrt>path</b> part. <br> <hr b=2> --\x3e\n <b>Match exactly:</b> The chosen URL part must be exactly equal to the entered text <hr b>\n <b>Contain:</b> The entered text can be anywhere inside the chosen URL part <hr b>\n <b>Start with:</b> The entered text must be at the beginning of the URL part <hr b>\n <b>End with:</b> The entered text must be at the end of the URL part <hr b=2>\n <hr b=2>\n Capital letters and small letters are treated equal.\n ",
evtUrl:" The <b>Event URL</b> condition is identical to the <b>URL</b> condition, <br> except it applies to the <c h=/tse/evt>event tab</c>\n instead of the <c h=/tse/cur>current tab</c>. <hr b>\n Hence, this condition is only available on triggers having a <br> <c h=/brwEvt>browser event</c>.\n <{urlPr1}>\n ",evtUrl2:" <{evtUrl}> <{urlPr3}>\n ",mtStpTrg:` In a multi-step trigger, each step must be performed <br> in sequence to fire the associated action.<hr b=4>\n <b>Example:</b> &nbsp; &nbsp;<mid><key>A</key> <sep></sep> <key>B</key> <sep></sep> <key>C</key></mid> <hr b=4>\n You must press <b>A</b>, then <b>B</b>, then <b>C</b>.<hr b=2>\n See <a href="${_xg.triggers}#multiStep">here</a> more examples of multi-step triggers.\n `,
newCmb:" Add another step to the trigger. <{MORE}> <hr b=2> <{mtStpTrg}>\n ",addTrg:" Add another trigger for the <u>same action</u>. <{MORE}> <hr b><hr b>\n You can define multiple triggers to fire the <br> same action. <hr b=2>\n For example, you can specify that the action <br> <b uc xsml>Zoom In</b> must be done when you press any <br> of\n <uc hl xsml blk>Ctrl+Up</uc>, <uc hl xsml blk>Shift+Up</uc> or <uc hl xsml blk>Alt+Up</uc>.\n ",act:" Whether to trigger your action when you <b>press</b> the <br> key/button or when you <b>release</b> it. <hr b>\n If you choose <b>Press</b>, your action will <c h=typRpt>auto-repeat</c> if <br> you keep holding the key down. <br>\n Check <u>No auto-repeat</u> below to prevent this.\n \x3c!--Only keyboard keys have <br> automatic repeat (except <c h=mediaKs>media keys</c> which do not).--\x3e\n ",
typRpt:' All keyboards have a feature called <a href="https://bltt.org/adjust-windows-keyboard-repeat-rate/">Typematic Repeat</a>. <br> This happens when you hold a key down for longer than a <br> single keystroke.\n As long as you keep holding a key down, <br> the keyboard will keep sending key presses at a fast rate. <hr b=2>\n This feature exists in <u>keyboards only</u>. All keys behave this <br> way with the exception of <c h=mediaKs>media keys</c>\n (except <key xsml blk>Vol. Up</key> <br> and <key xsml blk>Vol. Down</key> that do auto-repeat in some keyboards).\n ',
autoRep:" Do not trigger your action when the key is <c h=typRpt>auto-repeating</c>, <br> i.e. when you keep holding it down. <br>\n The initial key press will always trigger your action, but the <br> repetitions that come immediately afterwards will not. <hr b>\n This only affects your custom action, not the key's native <br> action. Use the <b u>Override</b> option to suppress the latter.\n ",dir:" Which direction to turn the wheel <br> in order to trigger the action.\n ",state:` Whether the key or button must be in its <b>pressed</b> state (<c symb style="vertical-align: -45%">&#x2304;</c>) or in <br>\n its <b>released</b> state (<c symb>&#x2303;</c>) in order for the combination to take effect. <br>\n For example, to trigger this combination: <hr b=3>\n <wc>**</wc>+<key dir=D>Ctrl</key>+<key dir=U>Shift</key>+<key>A</key> <hr b=3>\n you must press at least <key>Ctrl</key> and <key>A</key> but not <key>Shift</key>. i.e. the <br> double wildcard (<wc>**</wc>)\n allows other keys to be pressed, with the <br> exception of <key>Shift</key> which must be in its <b>released</b> position in <br>\n order for the combination to take effect. <hr b=2> See more examples on <a href="${_xg.triggers}">this page</a>.\n `,
locKSte:" <{state}> <{MORE}> <hr b=3> Additionally, toggle keys (<c hl0 blr>Caps Lock</c>, <c hl0 blr>Num Lock</c>, etc.) support <br>\n the <u blr blk>toggled on</u> and <u blr blk>toggled off</u> states which can also be part of a <br>\n combination in the same way the <b>pressed</b> and <b>released</b> states <br> can.\n ",holdDown:" The amount of time you must hold the key/button <br> down in order to trigger your action. <br>\n The action will repeat at the specified rate if you keep <br> holding the key/button down. <br>\n This automatic repetition occurs even with mouse and <br> joystick buttons (which don't have <c h=typRpt>native auto-repeat</c>). <br> \n Check <u>No auto-repeat</u> to disable this repetition.\n \x3c!-- Only keyboard keys have <br> automatic repeat (except <c h=mediaKs>media keys</c> which do not). --\x3e\n ",
repeat:" How many times you have to press, release or turn <br> the key/button/wheel in order to trigger the action. <hr b=2>\n The maximum time allowed between repetitions of <br> a key/button/wheel is set at\n <u>Options</u> > <u>Advanced <br> Options</u> > <u>Trigger repetition timeout</u>.\n ",block:" You can override the native action of this key/button/wheel. If you do so, its <br> native action will not be performed,\n only your custom action will. <br>\n If you do not override it, then its native action and your custom action will <br> BOTH be performed. <hr b>\n There are two override modes... <{MORE}> <hr b=2>\n <b>Simple override:</b> <hr b>\n Either the PRESS action or the RELEASE action of the key/button will be <br> overridden,\n depending on what you chose in the <u blr blk>Action</u> field, above. <br> Prefer this mode as it's simpler and it works in most cases.\n <hr b=3>\n <b>Full override:</b> <hr b>\n Both the PRESS and the RELEASE action of the key/button will be overridden. <br> This mode does not apply to scroll wheels. <br>\n This mode is usually not needed as most keys and buttons don't perform any <br> action when released.\n \x3c!--It's only when you PRESS a key or button that its native <br> action is performed.--\x3e\n An exception to this is, for example, the mouse's Right <br> button which <i>does</i> perform its native action when released. <hr b>\n Use this mode only if <b>Simple override</b> doesn't work.\n <{MORE}> <hr b=3>\n Not all keys have a native action. For example, pressing <key>F2</key> in Google <br> Chrome does nothing,\n so there's no need to override anything in that case. <hr b=2>\n A few keys cannot be overridden when they are in special combinations <br> such as\n <uc hl xsml blk>ctrl</uc>+<uc hl xsml blk>alt</uc>+<uc hl xsml blk>del</uc> and <uc hl xsml blk>win</uc>+<uc hl xsml blk>l</uc>,\n and possibly a few others <br> depending on your operating system version.\n ",
block2:" You can override the native action of this key/button. If you do so, <br> its native action will not be performed\n when the key/button is <br> pressed together with the other elements in the combination (keys, <br> buttons, wheels, gestures, events, etc.).\n <hr b=2>\n For example, in the combination <key>Tab</key>+<key>Q</key>, if you override <key>Tab</key>, <br> it will not perform its native action\n if it's combined with <key>Q</key>. <br> Otherwise, <key>Tab</key> <i>will</i> perform its native action <c u2>once it's released</c>.\n <hr b=3>\n Modifier keys like <key>Ctrl</key>, <key>Shift</key> and <key>Alt</key> don't have a native <br> action by themselves,\n so there's no need to override them. Doing <br> so would prevent other programs from using them as modifiers.\n <hr b=2>\n There are two override modes... <{MORE}> <hr b=2>\n <b>Simple override:</b> <hr b>\n Only the PRESS action of the key/button will be overridden. Prefer <br> this mode as it's simpler and it works in most cases.\n <hr b=3>\n <b>Full override:</b> <hr b>\n Both the PRESS and the RELEASE action of the key/button will be <br> overridden.\n This mode is usually not needed as most keys and <br> buttons don't perform any action when released.\n An exception to <br> this is, for example, the mouse's Right button which <i>does</i> perform <br> its native action when released. <hr b>\n Use this mode only if <b>Simple override</b> doesn't work.\n ",
wildcard:` The combination wildcard controls whether other keys and buttons are <br> allowed to be pressed at the same\n time that this key or combination is <br> being performed. <hr b=2>\n <b>No wildcard:</b>\n No other keys or buttons can be held down while you are <br> pressing this key or combination. <hr b=2>\n <b>On other devices:</b>\n Other keys and buttons are allowed to be held down <br> <c h=otherDevs>on other devices</c> while you are pressing this key or combination. <hr b=2>\n <b>On any device:</b>\n Other keys and buttons are allowed to be held down on <br> any device while you are pressing this key or combination.\n <hr b=4>\n See <a href="${_xg.triggers}">here</a> some examples of the usage of wildcards.\n `,
wcEnv:" The combination wildcard controls whether additional keys and <br> buttons are allowed to be pressed when this event occurs. <hr b=2>\n <b>No wildcard:</b>\n No other keys and buttons must be held down while <br> this event occurs. Otherwise, the trigger will not fire its action. <hr b=3>\n <b>On any device:</b>\n Other keys and buttons are allowed to be held <br> down on any device while this event occurs. <hr b=4>\n For example, <wc>*</wc>+<key>Ctrl</key>+<envEvt>Tab opens</envEvt> will fire its associated action <br> whenever a tab is opened while\n at least <key>Ctrl</key> is held down (i.e. <br> other keys/buttons are optional). <br>\n Whereas without the wildcard, no other keys/buttons are accepted <br> as part of the trigger.\n ",
maxTime:" The max. amount of time you've got for performing this <br> step of the sequence from the moment you completed <br> the previous step. <hr b>\n For example, in the sequence <mid><key>A</key> <sep></sep> <key>B</key> </mid>, this is the <br> maximum time allowed between pressing\n <b>A</b> and <b>B</b>. <hr b=3>\n Leave it blank (or zero) to use the default timeout set at <br> <u>Options</u> > <u>Advanced Options</u> > <u>Trigger steps timeout</u>.\n ",antiSeq:` Invert the meaning of the sequence to be an <b>anti-sequence</b>. <br> That is, the associated action will be performed if the previous <br>\n trigger step was NOT done. <hr b=2>\n See at the end of <a href="${_xg.triggers}#multiStep">this page</a> some anti-sequence examples. \n `,
otherDevs:' <b>Other devices</b> mean all devices that are <u>not part</u> of this combination. <hr b>\n For example, if the combination is the key <uc hl xsml blk>F1</uc> alone, then "other devices" <br> are the mouse and all joysticks. <hr b>\n If the combination includes <uc hl xsml blk>Right Btn</uc> and <uc hl xsml blk>Joy 1 - Btn 1</uc>, then the "other <br> devices"\n are the keyboard and joysticks #2 to #8. \n ',tbBtnSel:" Choose which toolbar button must be clicked <br> in order to trigger the action. <hr b>\n You can add more buttons in the <b>Options</b>, <br> under section <u>Custom Toolbar Buttons</u>.\n ",
tbBtnMtd:" Choose which mouse button must be used to click the toolbar button. <hr b=2>\n <b>Limitation:</b> The <b>press</b> methods may not work on less popular browsers <br> such as Opera and Vivaldi. <hr b=2>\n Comparison of <b>Left click</b> vs. <b>Left press</b>: <hr b=2>\n <table brd>\n <tr><th>Left click<th>Left press\n <tr><td> Triggers the action when the <br> mouse button is released <td> Triggers the action when the <br> mouse button is pressed\n <tr><td> Has a delay of a fraction of <br> a second sometimes <td> Has no delay\n <tr><td> Allows to drag the toolbar button <td> Dragging is not possible\n <tr><td> Works on all Chromium browsers <td> Does not work on some browsers <br> such as Opera and Vivaldi\n </table>\n \x3c!--\n A button <b u>press</b> will trigger the action as soon as the button is pressed <br> down. <hr b>\n <b u>Left click</b> is a special method that will trigger the action when the left <br> mouse button is pressed and released\n over the toolbar button. This <br> method may have a slight delay of a fraction of a second in some cases <br> but it will\n work on less popular browsers such as Opera or Vivaldi where <br> the <b>press</b> methods might not work.\n --\x3e\n ",
clpFmt:" Choose the type of clipboard content that will trigger the event. <hr b=2>\n <b>(any type):</b> The event will occur when new content of any type is put in <br> the clipboard. <hr b=2>\n <b>Text:</b> The event will occur only when you cut or copy plain text from simple <br> text fields and\n editors such as Notepad, form fields in webpages and similar. <hr b=2>\n <b>Formatted text:</b> The event will occur only when you cut or copy text <br> containing formatting data such as font color, size, style, etc.\n For example, <br> text copied from webpages, Word documents, PDF documents and similar. <hr b=2>\n <b>Image:</b> The event will occur only when you cut or copy an image or part of <br> an image inside an image editor (such as MS Paint)\n or when you press the <br> <key>Prt Scr</key> key which puts a screenshot in the clipboard. <hr b=2>\n <b>Files/Folders:</b> The event will occur only when you cut or copy files and <br> folders from a file explorer window or the desktop. \n ",
clpDiff:' Enable this option so that the event occurs only when the <br> new content put in the clipboard is different from its previous <br> content.\n i.e. there must be an actual change with respect to <br> the previous clipboard content. <hr b>\n For example, if you copy the text "Hello" to the clipboard when <br> it previously contained that same text, the event won\'t occur.\n ',env:{cbEvtEx:"<br> You can specify additional conditions in the event's options.",tabEvtEx:'<hr b=2> To apply an action to this tab, choose <c blr blu>"Event tab"</c> <br> in the <b u>Apply to</b> select box on the action side.',
winEvtEx:'<hr b=2> To apply an action to this window or the tabs in it, choose <br> <c blr blu>"Event tab"</c> in the <b u>Apply to</b> select box on the action side.',evts:{LNK:"/envEvts"}},region:{brwW:' When the mouse is anywhere over the browser window. <hr b=2>\n <guiElems win><img><rect style="left: -1px; top: 0px; right: -1px; bottom: 0px"></rect></guiElems>\n ',webP:' When the mouse is anywhere over the web page area. <hr b=2>\n <guiElems win><img><rect style="left: 6px; top: 85px; right: 6px; bottom: 6px"></rect></guiElems>\n ',
titA:' When the mouse is over the title bar or tab strip. <hr b=2>\n <guiElems win><img><rect style="left: -1px; top: 0px;right: -1px; height: 50px"></rect></guiElems>\n ',tab:' When the mouse is over any of the tabs in the tab strip. <hr b=2>\n \x3c!--\n <b>Limitation:</b> This condition will also be true when the mouse <br> is over a <a href="<{/URLS/tabGrps}>">tab group</a>\'s label.\n <hr b=2>\n --\x3e \n <{tabArea}>\n ',tabArea:'<guiElems win><img><rect style="left: 11px;top: 11px;right: 139px;height: 39px;"></rect></guiElems>\n ',
tabX:' When the mouse is over a tab\'s close button. <hr b=2>\n \x3c!--\n <b>Limitation:</b> This condition does not work on tabs that are <br> inside a <a href="<{/URLS/tabGrps}>">tab group</a>.\n <hr b=2>\n --\x3e\n <guiElems win><img>\n <rect style="left: 93px;top: 20px;width: 20px;height: 22px"></rect>\n <rect style="left: 207px;top: 20px;width: 20px;height: 22px"></rect>\n <rect style="left: 310px;top: 20px;width: 20px;height: 22px"></rect>\n </guiElems>\n ',tSpk:' When the mouse is over a tab\'s speaker icon. <br> This icon appears when a tab is <c h=/audTab>audible</c> or muted. <hr b=2>\n \x3c!--\n <b>Limitation:</b> This condition does not work on tabs that are <br> inside a <a href="<{/URLS/tabGrps}>">tab group</a>.\n <hr b=2>\n --\x3e\n <guiElems win big><img style="margin: 0 -136px -99px -22px"><rect style="left: 164px;top: 20px;width: 20px;height: 21px;"></rect></guiElems>\n ',
ntb:' When the mouse is over the new tab button. <hr b=2>\n <guiElems win><img><rect style="left: 342px;top: 15px;width: 33px;height: 32px"></rect></guiElems>\n ',tBar:' When the mouse is anywhere over the browser\'s toolbar. <hr b=2>\n <guiElems win><img><rect style="left: 5px;top: 47px;right: 6px;height: 39px;"></rect></guiElems>\n ',omnb:' When the mouse is over the editable area of the address bar. <hr b=2>\n <guiElems win><img><rect style="left: 142px;top: 50px;width: 232px;height: 31px;"></rect></guiElems>\n ',
bmrk:' When the mouse is over the star icon at the right edge of <br> the omnibox. <hr b=2>\n <guiElems win big><img style="margin: 0 -1px -110px -159px;"><rect style="left: 213px;top: 55px;width: 24px;height: 23px;"></rect></guiElems>\n ',brMn:' When the mouse is over the "3 dots" button that opens <br> the browser menu. <hr b=2>\n <guiElems win big><img style="margin: 0 -1px -110px -159px;"><rect style="left: 278px;top: 52px;width: 31px;height: 29px;"></rect></guiElems>\n ',mnuItm:()=>"file31.js",
aux:" When the mouse is over",miA:" <{aux}> any menu item <br> in an <c h=/actions/menu>AutoControl menu</c>.",miTb:" <{aux}> <{mnuItm/types0/tab}>",miTG:" <{aux}> <{mnuItm/types0/tbGrp}>",miCT:" <{aux}> <{mnuItm/types0/cTab}>",miCW:" <{aux}> <{mnuItm/types0/cWin}>",miBK:" <{aux}> <{mnuItm/types0/bmrk}>",miBF:" <{aux}> <{mnuItm/types0/bmFld}>",miAc:" <{aux}> <{mnuItm/types0/act}>",miSw:" <{aux}> <{mnuItm/types0/swt}>"},enTrig:' If a shortcut is set to work when the browser is not focused, that shortcut <br> is said to be "global". <br>\n If a global shortcut is defined on two AutoControl instances running at <br> the same time on the same computer,\n that shortcut will be detected by <br> those two instances simultaneously and so, its action will run twice. <hr b=2>\n This will happen inadvertently when <u>local synchronization</u> is enabled <br> because all settings are immediately\n copied to the other AutoControl <br> instances currently running. <hr b>\n In order to prevent this potentially undesired effect, triggers that specify <br> the browser states\n <c blu>Unfocused</c> or <c blu>Closed</c> are copied to other AutoControl <br> instances but are disabled by default. <hr b>\n You can choose to enable the trigger in this AutoControl instance if you <br> determine that this situation is not a problem for you.\n '};
